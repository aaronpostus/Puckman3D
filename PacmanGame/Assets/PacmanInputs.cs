//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/PacmanInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace PacmanInput
{
    public partial class @PacmanInputs: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PacmanInputs()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PacmanInputs"",
    ""maps"": [
        {
            ""name"": ""Pacman"",
            ""id"": ""ce5f77a2-d0cd-4efb-9451-10f990f7a501"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6c1154f0-f806-4c85-9f7b-7b8fa5d0840e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Quit"",
                    ""type"": ""Button"",
                    ""id"": ""73773953-ea9e-40fc-9662-c9ee75c25588"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Movements"",
                    ""id"": ""86557a34-3b05-4db3-83ee-37849894a3d2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e09f48e1-6a1c-4f22-9ea0-659437603a5e"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""97966040-e362-4295-9d48-8ab0f56475e3"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8d9d0aff-1d72-4d8d-bdd4-c4fd6d19a151"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""dd9782f3-cab1-4938-8536-1420261c2744"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""62d1f74c-6119-4446-8e14-4022a0cced92"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Pacman
            m_Pacman = asset.FindActionMap("Pacman", throwIfNotFound: true);
            m_Pacman_Movement = m_Pacman.FindAction("Movement", throwIfNotFound: true);
            m_Pacman_Quit = m_Pacman.FindAction("Quit", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Pacman
        private readonly InputActionMap m_Pacman;
        private List<IPacmanActions> m_PacmanActionsCallbackInterfaces = new List<IPacmanActions>();
        private readonly InputAction m_Pacman_Movement;
        private readonly InputAction m_Pacman_Quit;
        public struct PacmanActions
        {
            private @PacmanInputs m_Wrapper;
            public PacmanActions(@PacmanInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_Pacman_Movement;
            public InputAction @Quit => m_Wrapper.m_Pacman_Quit;
            public InputActionMap Get() { return m_Wrapper.m_Pacman; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PacmanActions set) { return set.Get(); }
            public void AddCallbacks(IPacmanActions instance)
            {
                if (instance == null || m_Wrapper.m_PacmanActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PacmanActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Quit.started += instance.OnQuit;
                @Quit.performed += instance.OnQuit;
                @Quit.canceled += instance.OnQuit;
            }

            private void UnregisterCallbacks(IPacmanActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
                @Quit.started -= instance.OnQuit;
                @Quit.performed -= instance.OnQuit;
                @Quit.canceled -= instance.OnQuit;
            }

            public void RemoveCallbacks(IPacmanActions instance)
            {
                if (m_Wrapper.m_PacmanActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPacmanActions instance)
            {
                foreach (var item in m_Wrapper.m_PacmanActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PacmanActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PacmanActions @Pacman => new PacmanActions(this);
        public interface IPacmanActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnQuit(InputAction.CallbackContext context);
        }
    }
}
